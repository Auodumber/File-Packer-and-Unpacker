/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package packerandunpacker;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Hp
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        showdate();
        showtime();
    } 
    
    public void showdate()
        {
        Date d =new Date();
        SimpleDateFormat s = new SimpleDateFormat("dd-mm-yyyy");
        date_label.setText("Date : "+s.format(d));
       
        }
    public void showtime()
        {
        Date d =new Date();
        SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss");
        time_label.setText("Time : "+s.format(d));
       
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        packer = new javax.swing.JButton();
        unpacker = new javax.swing.JButton();
        date_label = new javax.swing.JLabel();
        time_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(619, 318));

        packer.setText("packer");
        packer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packerActionPerformed(evt);
            }
        });

        unpacker.setText("unpacker");
        unpacker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unpackerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(139, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(packer, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(unpacker, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(date_label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(time_label, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date_label, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time_label, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packer, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unpacker, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(144, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void packerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packerActionPerformed
        // TODO add your handling code here:
        JFileChooser j = new JFileChooser();   // Filechooser
        j.setMultiSelectionEnabled(true);      // multiple selection of file
        j.setAcceptAllFileFilterUsed(false);   // filter for txt files
        j.setDialogTitle("Select .txt file");  //title for dialogbox
        
        
        /* FileNameExtensionFilter allows only txt files to be select*/
        
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("Select .txt files" ,"txt");
        j.addChoosableFileFilter(restrict); //passing object of FileNameExtensionFilter 
                                             //to addChoosableFileFilter which is method in Filechooser class
       
        
        int r;
        r = j.showOpenDialog(null);  //r holds returnvalue of showOpenDialog
        
        /*if User selects file*/
        
        if(r == JFileChooser.APPROVE_OPTION)
        {   
              File files[] = j.getSelectedFiles();  //array of Files to store multiple files
              new SelectedFilesShow(files).setVisible(true);
              this.dispose();
        }
        else
        {
             JOptionPane.showMessageDialog(rootPane,"You not selected any file");
        }
        
        
        
    }//GEN-LAST:event_packerActionPerformed

    
/* Unpacker*/
    
    private void unpackerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unpackerActionPerformed
        
        String packfilename;        // for pck file
        String folder;             // for extracting folder
        
        //logic for open pck file:
        JFileChooser pckfile = new JFileChooser();
        pckfile.setAcceptAllFileFilterUsed(false);   // filter for txt files
        pckfile.setDialogTitle("Select .pck file");  //title for dialogbox
       
        /* FileNameExtensionFilter allows only txt files to be select*/
        FileNameExtensionFilter restrict = new FileNameExtensionFilter("Select .pck files" ,"pck");
        pckfile.addChoosableFileFilter(restrict); //passing object of FileNameExtensionFilter 
                                                 //to addChoosableFileFilter which is method in Filechooser class
         int r;
         r = pckfile.showOpenDialog(null);  //r holds returnvalue of showOpenDialog
         
         /*if User selects file*/
        
        if(r == JFileChooser.APPROVE_OPTION)
        {   
          packfilename = pckfile.getSelectedFile().getAbsolutePath();
          //System.out.println(name);
          JOptionPane.showMessageDialog(rootPane,"You have Selected"+packfilename);
          
          
            //logic for extracting files:
            JFileChooser j = new JFileChooser();
            j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            j.setDialogTitle("Select folder To save your files");
            int ret = j.showSaveDialog(null);
        
            if(r == JFileChooser.APPROVE_OPTION )
            {
                folder = j.getSelectedFile().getAbsolutePath();   //selects folder to save unpacked files
                //System.out.println(folder);
                Unpacker unp = new Unpacker();
               
              try {
                  int result = unp.unpackeractivity(packfilename,folder); // call method
                  if(result<0)
                  {
                      JOptionPane.showMessageDialog(rootPane, "invalid file format");
                  }
              } catch (IOException ex) {
                  Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
              }
               
               
                
            }
            else
            {
               JOptionPane.showMessageDialog(rootPane,"You have canceled the operation");
            }
        }
        else
        {
          JOptionPane.showMessageDialog(rootPane,"You have canceled the operation");
        }
    }//GEN-LAST:event_unpackerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel date_label;
    private javax.swing.JButton packer;
    private javax.swing.JLabel time_label;
    private javax.swing.JButton unpacker;
    // End of variables declaration//GEN-END:variables

    static DateFormat df,ts;
    Date dateobj = new Date();
}
